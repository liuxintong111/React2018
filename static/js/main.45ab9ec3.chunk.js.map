{"version":3,"sources":["components/Input.js","components/List.js","components/TodoList.js","index.js"],"names":["Input","className","htmlFor","id","value","this","props","inpValue","type","onChange","handelChange","onClick","addTodo","Component","List","arr1","todos","filter","item","done","length","style","color","renderTodos","TodoList","e","setState","target","state","title","delTodo","idx","index","toggle","newTodos","JSON","parse","stringify","map","todo","checked","localStorage","getItem","setItem","ReactDOM","render","document","getElementById"],"mappings":"2NAmBeA,G,8KAZP,OACI,yBAAKC,UAAU,OACX,2BAAOC,QAAQ,OAAf,YACA,2BAAOC,GAAG,MAAMC,MAAOC,KAAKC,MAAMC,SAAUC,KAAK,OAAOC,SAAUJ,KAAKC,MAAMI,eAE7E,4BAAQC,QAASN,KAAKC,MAAMM,SAA5B,qB,GARIC,cCyBLC,E,uKArBX,IAAIC,EAAKV,KAAKC,MAAMU,MAAMC,QAAO,SAAAC,GAAI,OAAGA,EAAKC,QAE7C,OAEI,6BACI,uDAASJ,EAAKK,QACV,wBAAIC,MAAO,CAACC,MAAM,QACdjB,KAAKC,MAAMiB,aAAY,IAE/B,wDACI,4BACClB,KAAKC,MAAMiB,aAAY,S,GAfrBV,aCuFJW,E,kDAtFX,aAAc,IAAD,8BACT,gBAMJd,aAAa,SAACe,GACV,EAAKC,SAAS,CAACnB,SAASkB,EAAEE,OAAOvB,SARxB,EA4BbQ,QAAQ,WACG,EAAKgB,MAAMrB,WACV,EAAKmB,SAAS,CACdV,MAAM,CACF,CACIa,MAAM,EAAKD,MAAMrB,SAASY,MAAK,IAFlC,mBAIE,EAAKS,MAAMZ,UAGtB,EAAKY,MAAMrB,SAAS,KAtCf,EA4CbuB,QAAQ,SAACC,GACL,EAAKL,SAAS,CACVV,MAAM,EAAKY,MAAMZ,MAAMC,QAAO,SAACC,EAAKc,GAAN,OAAcA,GAAOD,QA9C9C,EAkDbE,OAAO,SAACD,GACJ,IAAIE,EAASC,KAAKC,MAAMD,KAAKE,UAAU,EAAKT,MAAMZ,QAClDkB,EAASF,GAAOb,MAAMe,EAASF,GAAOb,KACtC,EAAKO,SAAS,CACVV,MAAMkB,KAtDD,EAyDbX,YAAY,SAACJ,GACT,OAAO,EAAKS,MAAMZ,MAAMsB,KAAI,SAACC,EAAKR,GAC9B,GAAGZ,GAAMoB,EAAKpB,KACV,OAAM,4BACF,2BACIR,QAAS,kBAAI,EAAKsB,OAAOF,IACzBvB,KAAK,WACLgC,QAASrB,IAGb,8BAAOoB,EAAKV,OACZ,4BAAQlB,QAAS,kBAAI,EAAKmB,QAAQC,KAAlC,qBAlEZ,EAAKH,MAAM,CACPrB,SAAS,GACTS,MAAM,IAJD,E,gEAaR,IAAIA,EAAMyB,aAAaC,QAAQ,SAC5B1B,GACCX,KAAKqB,SAAS,CACVV,MAAMmB,KAAKC,MAAMpB,O,2CAMzByB,aAAaE,QACT,QACAR,KAAKE,UAAUhC,KAAKuB,MAAMZ,U,+BAoD/B,OACI,6BACI,kBAAC,EAAD,CAAOT,SAAUF,KAAKuB,MAAMrB,SAAUS,MAAOX,KAAKuB,MAAMZ,MAAON,aAAcL,KAAKK,aAAcE,QAASP,KAAKO,UAC9G,kBAAC,EAAD,CAAML,SAAUF,KAAKuB,MAAMrB,SAAUS,MAAOX,KAAKuB,MAAMZ,MAAOO,YAAalB,KAAKkB,mB,GAhFzEV,aC4GvB+B,IAASC,OAUP,kBAAC,EAAD,MACAC,SAASC,eAAe,W","file":"static/js/main.45ab9ec3.chunk.js","sourcesContent":["import { render } from '@testing-library/react'\r\nimport React,{Component} from 'react'\r\n\r\n\r\nclass Input extends Component {\r\n  \r\n    render(){\r\n        return (\r\n            <div className='box'>\r\n                <label htmlFor=\"inp\">todolist</label>\r\n                <input id='inp' value={this.props.inpValue} type=\"text\" onChange={this.props.handelChange}/>  \r\n    \r\n                <button onClick={this.props.addTodo}>添加</button>\r\n            </div>\r\n        )\r\n    }\r\n    \r\n}\r\n\r\nexport default Input;","import React,{Component} from 'react'\r\n\r\n\r\n    \r\nclass List extends Component {\r\n\r\n\r\n    render(){\r\n    let arr1=this.props.todos.filter(item=>!item.done);\r\n\r\n    return (\r\n        \r\n        <div>\r\n            <h2>正在进行{arr1.length}</h2>\r\n                <ul style={{color:'red'}}>\r\n                   {this.props.renderTodos(false)}\r\n                </ul>\r\n            <h2>已经完成</h2>\r\n                <ul>\r\n                {this.props.renderTodos(true)}\r\n                </ul>    \r\n        </div>\r\n    )\r\n    }\r\n}\r\n\r\n    \r\n\r\n\r\nexport default List;","import React, { Component } from 'react'\r\nimport Input from './Input';\r\nimport List from './List';\r\n\r\nclass TodoList extends Component {\r\n    constructor(){\r\n        super();\r\n        this.state={\r\n            inpValue:'',\r\n            todos:[],\r\n        }\r\n    }\r\n    handelChange=(e)=>{\r\n        this.setState({inpValue:e.target.value})\r\n        // console.log(e.target.value)\r\n     }\r\n     componentDidMount(){\r\n        //  this.input.focus();\r\n         let todos=localStorage.getItem('todos');\r\n         if(todos){\r\n             this.setState({\r\n                 todos:JSON.parse(todos)\r\n             })\r\n         }\r\n\r\n     }\r\n     componentDidUpdate(){\r\n         localStorage.setItem(\r\n             'todos',\r\n             JSON.stringify(this.state.todos)\r\n         )\r\n     }\r\n     //添加项\r\n    addTodo=()=>{\r\n            if(this.state.inpValue){\r\n                this.setState({\r\n                todos:[\r\n                    {\r\n                        title:this.state.inpValue,done:false\r\n                    },\r\n                    ...this.state.todos\r\n                ]\r\n            })\r\n            this.state.inpValue=\"\";\r\n            }\r\n            \r\n        \r\n    }\r\n    //删除添加的项\r\n    delTodo=(idx)=>{\r\n        this.setState({\r\n            todos:this.state.todos.filter((item,index)=>index!=idx)\r\n        });\r\n\r\n    }\r\n    toggle=(index)=>{\r\n        let newTodos=JSON.parse(JSON.stringify(this.state.todos));\r\n        newTodos[index].done=!newTodos[index].done;\r\n        this.setState({\r\n            todos:newTodos\r\n        })\r\n    }\r\n    renderTodos=(done)=>{\r\n        return this.state.todos.map((todo,idx)=>{\r\n            if(done==todo.done){\r\n                return<li>\r\n                    <input \r\n                        onClick={()=>this.toggle(idx)}\r\n                        type=\"checkbox\" \r\n                        checked={done}\r\n                    />\r\n                    {/* <span dangerouslySetInnerHTML={{__html:todo.title}}></span> */}\r\n                    <span>{todo.title}</span>\r\n                    <button onClick={()=>this.delTodo(idx)}>删除</button>\r\n                </li>\r\n            }  \r\n        }  \r\n        )\r\n    }\r\n    \r\n    render() {\r\n        return (\r\n            <div>\r\n                <Input inpValue={this.state.inpValue} todos={this.state.todos} handelChange={this.handelChange} addTodo={this.addTodo}/>\r\n                <List inpValue={this.state.inpValue} todos={this.state.todos} renderTodos={this.renderTodos}/>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    \r\n}\r\nexport default TodoList;\r\n\r\n\r\n","// import { render } from '@testing-library/react';\r\n// import { data } from 'jquery';\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n// import Control from './components/Control';\r\n// import Home from './pages/Home';\r\n// import Demo01 from './pages/Demo01';\r\n// import App from './pages/App';\r\n// import Hoc,{Detail} from './pages/Hoc';\r\n\r\n// import Hook from './pages/Hook'\r\n// import Context from './pages/context'\r\nimport TodoList from './components/TodoList';\r\n\r\n// ctrl+shift+左右键   ：选中整个单词\r\n//ctrl+shift+L:选中所有一样的单词\r\n\r\n\r\n\r\n// const List=(props)=>{\r\n//   return <ul>\r\n//     {\r\n//       props.data.map((item)=><li key={item.id}>{item.title}</li>)\r\n//     }\r\n//   </ul>\r\n// }\r\n// \r\n\r\n\r\n\r\n\r\n// class Home extends React.Component{\r\n//   constructor(){\r\n//     super();\r\n//     this.state={\r\n//       data:[1,2,3]\r\n//     }\r\n    \r\n    // fetch('https://cnodejs.org/api/v1/topics')\r\n    // .then(res=>res.json())\r\n    // .then(({data})=>{\r\n    //   this.setState({data})\r\n    // })\r\n    // this.state={\r\n    //   data:[1,2,3]\r\n    // }\r\n  //   setTimeout(()=>{\r\n  //     this.setState({data:[5,6,7,8]})\r\n  //   },1000)\r\n  // }\r\n  // render(){\r\n  //   return <ul>\r\n  //     {\r\n  //       data.map(\r\n  //         (item)=><li key={item.id}>{item}</li>\r\n  //       )\r\n  //     }\r\n  //   </ul>\r\n  // }\r\n\r\n\r\n\r\n// // componentDidMount(){//在render之后执行，执行之后render有执行一次，因为setState的调用\r\n// //   fetch('https://cnodejs.org/api/v1/topics')\r\n// //     .then(res=>res.json())\r\n// //     .then(({data})=>{\r\n// //       this.setState({data})\r\n// //     })\r\n// // }\r\n\r\n\r\n// // handleClick(item){\r\n// //   console.log(this.item);\r\n// // }\r\n\r\n// // getData=(page)=>{\r\n// //   console.log(page);\r\n// //   fetch('https://cnodejs.org/api/v1/topics?page='+page)\r\n// //     .then(res=>res.json())\r\n// //     .then(({data})=>{\r\n// //       this.setState({data})\r\n// //     })\r\n// // }\r\n\r\n\r\n\r\n\r\n\r\n\r\n  // render(){\r\n  //   const {data}=this.state;\r\n  //   // return <ul>\r\n  //     // {\r\n  //   //     data.map(\r\n  //   //       (item)=><li>{item.title}</li>\r\n  //   //     )\r\n  //   //   }\r\n  //   // </ul>\r\n  //   const btns=[1,2,3,4,5];\r\n  //   return <div>\r\n  //     {/* <button onClick={this.handleClick}></button> */}\r\n  //     {\r\n  //      btns.map( (item) => <button key={item} onClick={()=>this.getData(item) }>{item}</button>)\r\n  //     }\r\n  //     <List data={data}/>\r\n  //   </div> \r\n    \r\n  // }\r\n\r\n\r\n// }\r\n\r\nReactDOM.render(\r\n  \r\n  // <Demo/>,\r\n  // <div/>,\r\n  // <Home data='abc'/>,\r\n  // <Control/>,\r\n  // <Demo01/>,\r\n  // <App/>,\r\n  // <div><Hoc/><Detail name='tom'/></div>,\r\n  // <Context.Provider value='123'><Hook/></Context.Provider>,\r\n  <TodoList/>,\r\n  document.getElementById('root')\r\n);\r\n\r\n//didupdata判断，不进行存储；\r\n\r\n\r\n\r\n\r\n// 点击按钮，获得数字\r\n// const Buttons=()=>{\r\n//   const btns=[1,2,3,4,5];\r\n//   const handleClick=(num)=>{\r\n//     console.log(num);\r\n//   }\r\n//   return <div>\r\n//     {\r\n//        btns.map( (item) => <button key={item} onClick={()=>handleClick(item)}>{item}</button>)\r\n//     }\r\n   \r\n//   </div>\r\n// }\r\n// ReactDOM.render(\r\n//   <Buttons/>,\r\n//   document.getElementById('root')\r\n// )\r\n\r\n\r\n\r\n\r\n\r\n// const List=()=>{\r\n  //   const list=[1,2,3,4,5];\r\n  \r\n  //   return <div>\r\n  //     {\r\n  //       list.map((item)=><li key={item.id}>{item}</li>)  \r\n  //     }\r\n  //   </div>\r\n    \r\n  // };\r\n  // ReactDOM.render(\r\n  //     <List/>,\r\n  //     document.getElementById('root')\r\n  // );\r\n\r\n\r\n\r\n\r\n//智能组件\r\n//类组件:只有类组件能够作为只能组件\r\n// class Demo extends React.Component{\r\n//   constructor(){\r\n//     super();\r\n//     this.state=new Date().toLocaleString();\r\n//     //每调用一次setState,就进行一次渲染render\r\n//     setInterval(()=>{\r\n//       this.setState({name:new Date().toLocaleString()});\r\n//     },1000)\r\n//   }\r\n//   render(){\r\n//     return <div>\r\n//       <h1>组件</h1>\r\n//       <div>name:{this.state.name}</div>\r\n//     </div>\r\n//   }\r\n// }\r\n// ReactDOM.render(\r\n//   <Demo/>,\r\n//   document.getElementById('root')\r\n// )\r\n\r\n\r\n\r\n\r\n\r\n// class Demo extends React.Component{\r\n//   constructor(){\r\n//     super();\r\n//     //声明状态\r\n//     this.state=new Date().toLocaleString();\r\n\r\n//     // setInterval(()=>{\r\n//     //   this.setState({name:new Date().toLocaleString()});\r\n      \r\n//     // },1000)\r\n//   }\r\n//   render(){\r\n//     return <div>\r\n//       <h1>组件</h1>\r\n//       <div>name:{this.state}</div>\r\n//     </div>\r\n//   }\r\n// }\r\n// ReactDOM.render(\r\n//   <Demo/>,\r\n//   document.getElementById('root')\r\n// )\r\n\r\n\r\n\r\n\r\n//   render(){\r\n//     return <div>\r\n//       <h1>组件</h1>\r\n//       <div>name:{this.state.name}</div>\r\n//       <App title={this.state.name} id=\"app\"/>\r\n//     </div>\r\n//   }\r\n// }\r\n\r\n\r\n\r\n\r\n// 组件声明\r\n// 函数组件\r\n//UI（展示）组件，木偶组件\r\n// function App(props){\r\n//   console.log(props);//是一个对象\r\n//   //解构\r\n//   const{title,id}=props;\r\n//   return<div>\r\n//     <div>{title}</div>\r\n//     <div>{id}</div>\r\n//   </div>\r\n// }\r\n// ReactDOM.render(\r\n//   <App title=\"abc\" id=\"efg\"/>,\r\n//   document.getElementById('root')\r\n// )\r\n\r\n\r\n\r\n// ReactDOM.render(\r\n//   // ele,\r\n//   <App title='abc' id=\"app\"/>,\r\n//   // <Demo/>,\r\n//   // <div/>,\r\n//   // <Home/>,\r\n//   document.getElementById('root')\r\n// );\r\n\r\n\r\n//组件\r\n/*---------------------------------------------------------------------------*/\r\n//jsx\r\n\r\n\r\n\r\n// let ele=<h1 id=\"title\">hello React</h1>;\r\n// let ele=React.createElement('h1',{id:'title'},'hello React');\r\n// console.log(ele);\r\n\r\n// let ele=React.createElement(\r\n//   'h1',\r\n//   {id:'title'},\r\n//   React.createElement('div',{id:'div1'},'hello')\r\n// );\r\n\r\n\r\n\r\n// let ele=<h1 id=\"title\" className=\"tit\">\r\n//   <div>当前时间</div>\r\n//   {new Date().toLocaleString()}\r\n// </h1>\r\n\r\n\r\n\r\n//获取当前时间\r\n// let ele=<h1>\r\n//   <div>当前时间</div>\r\n//   {new Date().toLocaleString()}\r\n// </h1>\r\n// ReactDOM.render(\r\n//   ele,\r\n//   document.getElementById('root')\r\n// )\r\n\r\n\r\n\r\n//定时器\r\n// let ele;\r\n// setInterval(()=>{\r\n//   ele=<h1>\r\n//     <div>当前时间</div>\r\n//     {new Date().toLocaleString()}\r\n//   </h1>\r\n// ReactDOM.render(\r\n//   ele,\r\n//   document.getElementById('root')\r\n// )\r\n// },1000);\r\n\r\n\r\n\r\n\r\n// let ele =<div id=\"title\" className=\"tit\">\r\n//   <h1>hello React</h1>\r\n//   hello world\r\n//   <h2>react</h2>\r\n//   <div>jsx</div>\r\n// </div>\r\n\r\n// let ReactDom={\r\n//   render(eleObj,container){\r\n//     //解构\r\n//     const{type,props}=eleObj;//type是第一层节点，props是第一层节点的属性，以及它的子元素\r\n//     //创建第一层节点 \r\n//     let ele=document.createElement(type);\r\n//     //遍历属性对象，将属性添加到第一层节点对象\r\n//     //props 包括id class 节点 字符串等内容\r\n//     for(const prop in props){ \r\n//       if(prop=='children'){\r\n//         //如果prop是子元素，将第一层节点对象的子元素添加进去\r\n//         if(typeof props.children==='string'){\r\n//           //如果子元素是字符串，为了避免覆盖先前文本，创建一个文本节点，将文本节点添加到第一层节点中，直接跳出\r\n//           const txtNode=document.createTextNode(props.children);\r\n//           ele.appendChild(txtNode);\r\n//           break;\r\n//         }\r\n//         //如果不是字符串，而是一个标签\r\n//         props.children.forEach((child)=>{\r\n//           if(typeof child==='string'){\r\n//             //这两条代码可以省略\r\n//             // const txtNode=document.createTextNode(child);\r\n//             // ele.appendChild(txtNode);\r\n//           }else{\r\n//             ReactDom.render(child,ele);\r\n//           }\r\n//         })\r\n//       }else{//如果prop是属性值，将props的属性添加给新建的ele节点\r\n//         ele[prop]=props[prop];\r\n//       }\r\n//     }\r\n//     container.appendChild(ele);//将ele节点添加到容器中\r\n//   }\r\n// }\r\n// ReactDOM.render(\r\n//   ele,\r\n//   document.getElementById('root')\r\n// )\r\n\r\n\r\n\r\n\r\n// if(prop=='className'){\r\n      //   // ele.setAttribute('class',props[prop]);\r\n      //   ele[prop]=props[prop];\r\n      // }\r\n\r\n\r\n\r\n// ReactDOM.render(\r\n//   // ele,\r\n//   // <App title='abc' id=\"app\"/>,\r\n//   // <Demo/>,\r\n//   // <div/>,\r\n//   <Home/>,\r\n//   document.getElementById('root')\r\n// );\r\n\r\n\r\n\r\n/*\r\n1.原生JS，DOM操作（JQ）\r\n2.React:开发效率高，性能高（不卡死），\r\n3.环境搭建，创建一个项目，运行\r\n4.JSX语法\r\n\r\n*/\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\n"],"sourceRoot":""}